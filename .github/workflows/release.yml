# SPDX-FileCopyrightText: 2023 iteratec GmbH
#
# SPDX-License-Identifier: Apache-2.0

# This workflow will publish a Java project with Gradle
# For maven build see: https://github.com/marketplace/actions/gradle-build-action
# For maven publishing see: https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven

name: Publish Release

# If input is empty we automatically bump the version
on:
  workflow_dispatch:
    inputs:
      customversion:
        description: 'Custom version'
        required: false
        default: ''

jobs:
  publish-release:
    runs-on: ubuntu-22.04
    steps:
      - name: Releasing custom version
        if: github.event.inputs.customversion != ''
        run: echo "Releasing version ${{ github.event.inputs.customversion }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
            gpg_private_key: ${{ secrets.SCB_BOT_GPG_KEY }}
            passphrase: ${{ secrets.SCB_BOT_GPG_PASSPHRASE }}
            git_user_signingkey: true
            git_commit_gpgsign: true

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SIGNING_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Prepare wrapper
        run: chmod +x mvnw

      - name: Test # Test must succeed before creating a release scm tag
        run: ./mvnw -B test

#      - name: Configure Git user
#        run: |
#          git config --global user.email "securecodebox@iteratec.com"
#          git config --global user.name "SecureCodeBoxBot"
#
#      - name: Configure GitHub Token
#        uses: oleksiyrudenko/gha-git-credentials@v2.1.1
#        with:
#            token: '${{ secrets.BOT_TOKEN }}'

      # CASE: Version set
      - name: "[Custom version] Release & Publish"
        if: github.event.inputs.customversion != '' # input "customversion" not empty
        uses: qcastel/github-actions-maven-release@master # TODO: change to fixed tag
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk/ # TODO: maybe move java version to env?
        with:
          git-release-bot-name: SecureCodeBoxBot
          git-release-bot-email: securecodebox@iteratec.com
          access-token: ${{ secrets.SCB_BOT_USER_TOKEN }}

          release-branch-name: main
          maven-args: -DreleaseVersion=${{ github.event.inputs.customversion }} -P release #-DreleaseVersion: set version, -P: profile

          gpg-enabled: true
          gpg-key: ${{ secrets.SCB_BOT_GPG_KEY }}
          gpg-passphrase: ${{ secrets.SCB_BOT_GPG_PASSPHRASE }}

      # CASE: NO version set
      - name: "[Auto version] Release & Publish"
        if: github.event.inputs.customversion == '' # input "customversion" empty
        run: echo '1' # TODO

#      - name: Bump custom version # Runs if custom version is set
#        if: github.event.inputs.customversion != ''
#        run: ./mvnw -B release:prepare -DreleaseVersion=${{ github.event.inputs.customversion }} -P release
#        env:
#          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSWORD }}
#
#      - name: Bump version # Runs if NO custom version is set
#        run: ./mvnw -B release:prepare -P release
#        env:
#          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSWORD }}
#
#      - name: Publish to Maven Central
#        run: ./mvnw release:perform
#        #run: ./mvnw -U -B clean deploy -P release # -U: force dependency updates , -B: no user input, -P: profile
#        env:
#          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.SIGNING_PASSWORD }}

        # TODO: Maybe create release in GitHub?
